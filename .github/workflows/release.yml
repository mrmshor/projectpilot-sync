name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ProjectPilot Sync ${{ github.ref }}
        draft: false
        prerelease: false

  build-and-upload:
    needs: release
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            asset_name: ProjectPilot-Sync-Windows-Setup.exe
            asset_path: electron/dist/*.exe
          - os: macos-latest
            asset_name: ProjectPilot-Sync-Mac.dmg
            asset_path: electron/dist/*.dmg
          - os: ubuntu-latest
            asset_name: ProjectPilot-Sync-Linux.AppImage
            asset_path: electron/dist/*.AppImage
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Add Electron to Capacitor
      run: |
        npm install @capacitor/electron --save-dev
        npx cap add electron
    
    - name: Build web app
      run: npm run build
    
    - name: Sync Capacitor
      run: npx cap sync
    
    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd electron
        npm install
        npm run electron:build-windows
    
    - name: Build Electron app (Mac)
      if: matrix.os == 'macos-latest'
      run: |
        cd electron
        npm install
        npm run electron:build-mac
    
    - name: Build Electron app (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd electron
        npm install
        npm run electron:build-linux
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ matrix.asset_path }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream