name: Build Desktop App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-desktop:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build web app
      run: npm run build
    
    - name: Install Electron dependencies
      run: |
        npm install electron electron-builder @electron/rebuild --save-dev
    
    - name: Create Electron app structure
      run: |
        mkdir -p electron
        
        # Create main.js
        cat > electron/main.js << 'EOF'
        const { app, BrowserWindow, shell } = require('electron')
        const path = require('path')
        const { spawn } = require('child_process')
        
        let mainWindow
        let serverProcess
        
        function createWindow() {
          mainWindow = new BrowserWindow({
            width: 1200,
            height: 800,
            webPreferences: {
              nodeIntegration: false,
              contextIsolation: true
            },
            icon: path.join(__dirname, 'assets/icon.png')
          })
          
          // Start local server
          const serverPath = path.join(__dirname, 'dist')
          serverProcess = spawn('python3', ['-m', 'http.server', '3000'], {
            cwd: serverPath,
            stdio: 'pipe'
          })
          
          // Wait a bit for server to start
          setTimeout(() => {
            mainWindow.loadURL('http://localhost:3000')
          }, 2000)
          
          // Handle external links
          mainWindow.webContents.setWindowOpenHandler(({ url }) => {
            shell.openExternal(url)
            return { action: 'deny' }
          })
        }
        
        app.whenReady().then(createWindow)
        
        app.on('window-all-closed', () => {
          if (serverProcess) {
            serverProcess.kill()
          }
          if (process.platform !== 'darwin') {
            app.quit()
          }
        })
        
        app.on('activate', () => {
          if (BrowserWindow.getAllWindows().length === 0) {
            createWindow()
          }
        })
        EOF
        
        # Create package.json for electron
        cat > electron/package.json << 'EOF'
        {
          "name": "projectpilot-sync",
          "version": "1.0.0",
          "description": "ProjectPilot Sync Desktop App",
          "main": "main.js",
          "author": "ProjectPilot Team",
          "license": "MIT",
          "build": {
            "appId": "app.projectpilot.sync",
            "productName": "ProjectPilot Sync",
            "directories": {
              "output": "../dist-electron"
            },
            "files": [
              "**/*",
              "!node_modules/**/*"
            ],
            "win": {
              "target": "nsis",
              "icon": "assets/icon.ico"
            },
            "mac": {
              "target": "dmg",
              "icon": "assets/icon.icns"
            },
            "linux": {
              "target": "AppImage",
              "icon": "assets/icon.png"
            },
            "nsis": {
              "oneClick": false,
              "allowToChangeInstallationDirectory": true,
              "createDesktopShortcut": true,
              "createStartMenuShortcut": true,
              "shortcutName": "ProjectPilot Sync"
            }
          }
        }
        EOF
        
        # Copy built files to electron
        cp -r dist electron/
        
        # Create basic icon (fallback)
        mkdir -p electron/assets
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > electron/assets/icon.png

    - name: Build Electron apps
      run: |
        cd electron
        npm install
        
        # Build for all platforms
        npx electron-builder --win --linux --mac --publish=never
    
    - name: Upload Desktop Installers
      uses: actions/upload-artifact@v4
      with:
        name: desktop-installers
        path: |
          dist-electron/*.exe
          dist-electron/*.dmg
          dist-electron/*.AppImage