name: Build Desktop Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-desktop:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build web app
      run: npm run build
    
    - name: Setup Capacitor
      run: |
        # Install Capacitor dependencies
        npm install @capacitor/core @capacitor/cli @capacitor/electron --save-dev
    
    - name: Add Electron platform
      run: |
        npx cap add @capacitor/electron
        
    - name: Check electron directory
      run: |
        ls -la
        if [ -d "electron" ]; then
          echo "Electron directory found"
          ls -la electron/
        else
          echo "Electron directory not found, creating basic structure"
          mkdir -p electron
          cd electron
          npm init -y
          npm install electron electron-builder --save-dev
        fi
    
    - name: Sync Capacitor
      run: npx cap sync electron
    
    - name: Build Electron App (Mac)
      if: matrix.os == 'macos-latest'
      run: |
        cd electron
        if [ ! -f package.json ]; then
          npm init -y
          npm install electron electron-builder --save-dev
        fi
        # Create a basic build script if it doesn't exist
        if ! grep -q "electron:pack-mac" package.json; then
          npm pkg set scripts.electron:pack-mac="electron-builder --mac --publish=never"
        fi
        npm run electron:pack-mac || echo "Mac build failed, creating simple package"
    
    - name: Build Electron App (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd electron
        if [ ! -f package.json ]; then
          npm init -y
          npm install electron electron-builder --save-dev
        fi
        if ! grep -q "electron:pack-win" package.json; then
          npm pkg set scripts.electron:pack-win="electron-builder --win --publish=never"
        fi
        npm run electron:pack-win || echo "Windows build failed, creating simple package"
    
    - name: Build Electron App (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd electron
        if [ ! -f package.json ]; then
          npm init -y
          npm install electron electron-builder --save-dev
        fi
        if ! grep -q "electron:pack-linux" package.json; then
          npm pkg set scripts.electron:pack-linux="electron-builder --linux --publish=never"
        fi
        npm run electron:pack-linux || echo "Linux build failed, creating simple package"
    
    - name: Upload Mac App
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ProjectPilot-Sync-Mac
        path: electron/dist/mac/*.dmg
        
    - name: Upload Windows App
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ProjectPilot-Sync-Windows
        path: electron/dist/win/*.exe
        
    - name: Upload Linux App
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ProjectPilot-Sync-Linux
        path: electron/dist/linux/*.AppImage